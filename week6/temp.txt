input -> hashFunction(input) - > output index/number
index -> [value]

eg: strings(key) -> len(string)%16;
collisions(as multiple keys are mapped to a constant hashcode)
komal -> 5
kumar -> 5
kiran -> 5

5 -> [komal, kumar, kiran]

Map<Key, Value>;
Map<String, Person> names = new HashMap<String, Person>();
in this case Key is of String datadatatype
Value - is a person datatype.

hash function len(string)%13; -> 5
hashFunction(keys in the hashmap) -> 5

names.put("komal", new Person("komal", "hyderabad"));  //obj1
names.put("kumar", new Person("kumar", "nellore"));  //obj1

names.get("komal") -> hashFunction("komal") -> 5

5 -> [("komal", obj1), ("kumar", obj2)];
5 -> 4 -> []
Map<String, Map<Integer, String>>

(key, val) => hash_func1 -> hash_func2 -> ..-> stored
getObj(key) -> hash_func1 -> hash_func2 ->...-> unique code -> do a lookup.

[1,2,3] 4
[1], [2], [3] => 1, 2, 3
[1,2], [2,3] => 3, 5
[1,2,3] => 6

Maximum of ([1,2,3,3,5,6]%4)
max([1, 2, 3, 3, 1, 2])  => 3

Maximum of ([1,2,3,3,5,6]%5)
max(1, 2, 3, 4, 0, 1) -> 4;

5 13
6 6 11 15 2

6, 6, 11, 15, 2 -1
[6,6], [6,11], [11, 15], [15, 2] - 2
[6,6,11], [6, 11, 15], [11,15, 2] - 3
[6,6,11,15], [6,11,15,2] - 4
[6,6,11,15,2] - 5
[6, 6, 11, 15, 2, 12, 17, 26, 17, 23, 32, 28, 38, 34, 40]%13
[6, 6, 11, 2, 2, 12, 4, 0, 4, 10, 6, 2, 12, 8, 1] => 12
M=13;
12%M -> 12

max
for (int i = 0; i < N; i++) {
    //subArraySum  = 0;
    for (int j = i; j < N; j++) {
        //subArraySum = subArraySum + arr[j];
        sumArray(j) - sumArray(i)
    }
    subArraySum%M
}

